package com.example.geohexcellgenerator;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.uber.h3core.H3Core;
import com.uber.h3core.util.LatLng;
import org.locationtech.jts.geom.*;
import org.locationtech.jts.io.ParseException;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

public class GenerateGeoJsonBoundaryFromListOfHexCells {
    private static Properties properties = new Properties();

    public static void main(String[] args) throws IOException, ParseException {
        // Load properties from file
        loadProperties();

        // List of hex cells
        List<String> hexCells = List.of("893cf6502cbffff", "893cf651c9bffff", "893cf651c83ffff", "893cf651c8fffff", "893cf651c07ffff", "893cf651c2fffff", "893cf651d4fffff", "893cf651d7bffff", "893cf651d2bffff", "893cf650a53ffff", "893cf650a47ffff", "893cf650a07ffff", "893cf650a23ffff", "893cf650a23ffff", "893cf642497ffff", "893cf650b43ffff", "893cf650b57ffff", "893cf650b57ffff", "893cf650b0bffff", "893cf650b7bffff", "893cf6424a7ffff", "893cf6424abffff", "893cf642417ffff", "893cf642483ffff", "893cf650a6fffff", "893cf6424d3ffff", "893cf64245bffff", "893cf64245bffff", "893cf64244bffff", "893cf6426a3ffff", "893cf6420dbffff", "893cf6420cbffff", "893cf642627ffff", "893cf642287ffff", "893cf6422bbffff", "893cf642217ffff", "893cf64220bffff", "893cf642257ffff", "893cf642253ffff", "893cf643527ffff", "893cf64352fffff", "893cf64224fffff", "893cf64227bffff", "893cf64049bffff", "893cf64048fffff", "893cf6404bbffff", "893cf6405cbffff", "893cf6400a3ffff", "893cf64017bffff", "893cf640e93ffff", "893cf640c43ffff", "893cf640c47ffff", "893cf640c63ffff", "893cf6408c3ffff", "893cf6408cfffff", "893cf640abbffff", "893cf640aabffff", "893cf640a77ffff", "893cf640a6fffff", "893cf64e48bffff", "893cf64e413ffff", "893cf64e407ffff", "893cf64e433ffff", "893cf64e423ffff", "893cf64e553ffff", "893cf64e573ffff", "893cf64e19bffff", "893cf64e18bffff", "893cf64e18fffff", "893cf64e10bffff", "893cf64e387ffff", "893cf64e38fffff", "893cf64e317ffff", "893cf64e333ffff", "893cf64eecfffff", "893cf64ee0bffff", "893cf64ee03ffff", "893cf64ee03ffff", "893cf64e8cfffff", "893cf64e81bffff", "893cf64e80bffff", "893cf64e847ffff", "893cf64eaa3ffff", "893cf64ebd7ffff", "893cf64eb1bffff", "893cf64eb0bffff", "893cf64ccb7ffff", "893cf64ccabffff", "893cf64cc07ffff", "893cf64cc73ffff", "893cf64cc63ffff", "893cf64cc6bffff", "893cf64cea7ffff", "893cf64c8c3ffff", "893cf64c8cfffff", "893cf64c843ffff", "893cf64c84fffff", "893cf64cbdbffff", "893c8db6483ffff", "893c8db648bffff", "893c8db64c7ffff", "893c8db64c3ffff", "893c8db64cfffff", "893c8db6443ffff", "893c8db66afffff", "893c8db6287ffff", "893c8db628fffff", "893c8db623bffff", "893c8db449bffff", "893c8db448fffff", "893c8db448fffff", "893c8db447bffff", "893c8db46a7ffff", "893c8db40c7ffff", "893c8db42bbffff", "893c8db42abffff", "893c8db43dbffff", "893c8db43cbffff", "893c8db435bffff", "893c8db5cb7ffff", "893c8db5dc7ffff", "893c8db5d1bffff", "893c8db5d47ffff", "893c8db58a7ffff", "893c8db58a3ffff", "893c8db5807ffff", "893c8db5847ffff", "893c8db5ab7ffff", "893c8db5a17ffff", "893c8db5a67ffff", "893c8da74d7ffff", "893c8da740fffff", "893c8da746fffff", "893c8da708bffff", "893c8da7013ffff", "893c8da7007ffff", "893c8da703bffff", "893c8da702bffff", "893c8da738bffff", "893c8da73c3ffff", "893c8da7237ffff", "893c8da729bffff", "893c8da7663ffff", "893c8da7653ffff", "893c8da2b2fffff", "893c8da2b2bffff", "893c8da2b67ffff", "893c8da2b7bffff", "893c8da0c87ffff", "893c8da0c93ffff", "893c8da0c9bffff", "893c8da2a6fffff", "893c8da01bbffff", "893c8da011bffff", "893c8da01cfffff", "893c8da01dbffff", "893c8da01d3ffff", "893c8da056bffff", "893c8da00bbffff", "893c8da0013ffff", "893c8da00d7ffff", "893c8da06a3ffff", "893c8da0683ffff", "893c8da312bffff", "893c8da31abffff", "893c8da31bbffff", "893c8da355bffff", "893c8db1b47ffff", "893c8db1b43ffff", "893c8db1b43ffff", "893c8da3497ffff", "893c8da3413ffff", "893c8da3457ffff", "893c8dba92bffff", "893c8dba977ffff", "893c8dba96bffff", "893c8da36dbffff", "893c8dbab23ffff", "893c8dbab0bffff", "893c8dbabcfffff", "893c8dbab5bffff", "893c8db8cc7ffff", "893c8db8c53ffff", "893c8db8e97ffff", "893c8db8ebbffff", "893c8db8e07ffff", "893c8db8e3bffff", "893c8db8e2bffff", "893c8db8e6fffff", "893c8db9d2fffff", "893c8db99cbffff", "893c8db9bd3ffff", "893c8dab48bffff", "893c8dab41bffff", "893c8dab457ffff", "893c8dab40bffff", "893c8dab44fffff", "893c8dab47bffff", "893c8dab473ffff", "893c8dab477ffff", "893c8dab42bffff", "893c8dab093ffff", "893c8dab097ffff", "893c8dab08bffff", "893c8dab08fffff", "893c8dab0afffff", "893c8dab1cbffff", "893c8dab107ffff", "893c8dab137ffff", "893c8dab127ffff", "893c8da845bffff", "893c8da86b7ffff", "893c8da80dbffff", "893c8da95a7ffff", "893c8da954fffff", "893c8da90abffff", "893c8da906fffff", "893c8da9267ffff", "893c8d06cd3ffff", "893c8d06cdbffff", "893c8d06137ffff", "893c8d06e87ffff", "893c8d06ebbffff", "893c8d06eabffff", "893c8d06e2bffff", "893c8d0684bffff", "893c8d0684fffff", "893c8d06ab3ffff", "893c8d06aabffff", "893c8d06a3bffff", "893c8d06a77ffff", "893c8d06a4fffff", "893c8d06a4fffff", "893c8d06a5bffff", "893c8d06a53ffff", "893c8d04183ffff", "893c8d04567ffff", "893c8d0456fffff", "893c8d041cfffff", "893c8d04027ffff", "893c8d043d7ffff", "893c8d043cbffff", "893c8d05c1bffff", "893c8d05137ffff", "893c8d0514bffff", "893c8d05393ffff", "893c8d05063ffff", "893c8d0505bffff", "893c8d0560bffff", "893c8d056cfffff", "893c8d00b37ffff", "893c8d00b23ffff", "893c8d00b2bffff", "893c8d00b77ffff", "893c8d00b0bffff", "893c8d00b43ffff", "893c8d00b53ffff", "893c8d00a23ffff", "893c8d00a0fffff", "893c8d00a47ffff", "893c8d00a47ffff", "893c8d00a57ffff", "893c8d00a1bffff", "893c8d00a8bffff", "893c8d00e6fffff", "893c8d00e6bffff", "893c8d00e4fffff", "893c8d01d87ffff", "893c8d01d8bffff", "893c8d01dcfffff", "893c8d01dd3ffff", "893c8d01ca7ffff", "893c8d01c8fffff", "893c8d01c93ffff", "893c8d0022bffff", "893c8d0020fffff", "893c8d01537ffff", "893c8d01513ffff", "893c8d015c7ffff", "893c8d015cbffff", "893c8d01437ffff", "893c8d0143bffff", "893c8d01473ffff", "893c8d0147bffff", "893c8d0146bffff", "893c8d010d3ffff", "893c8d0101bffff", "893c8d010cbffff", "893c8d01283ffff", "893c8d0128fffff", "893c8d012abffff", "893c8d0120fffff", "893c8d01273ffff", "893c8d0127bffff", "893c8d01247ffff", "893c8d012cfffff", "893c8d0a52bffff", "893c8d0a567ffff", "893c8d0a563ffff", "893c8d0a067ffff", "893c8d0a3a3ffff", "893c8d0a333ffff", "893c8d0a367ffff", "893c8d0859bffff", "893c8d085c7ffff", "893c8d085cfffff", "893c8d085dbffff", "893c8d08427ffff", "893c8d08553ffff", "893c8d0800bffff", "893c8d08073ffff", "893c8d0814bffff", "893c8d083b7ffff", "893c8d08edbffff", "893c8d08333ffff", "893c8d08313ffff", "893c8d08357ffff", "893c8d0835bffff", "893c8d08223ffff", "893c8d0823bffff", "893c8d08273ffff", "893c8d09cd3ffff", "893c8d09ccbffff", "893c8d0912bffff", "893c8d09177ffff", "893c8d0916fffff", "893c8d09ed3ffff", "893c8d093afffff", "893c8d093abffff", "893c8d093c7ffff", "893c8d093c3ffff", "893c8d093cfffff", "893c8d092abffff", "893c8d09277ffff", "893c8d0926fffff", "893c8d46cd7ffff", "893c8d46ccfffff", "893c8d46c43ffff", "893c8d46c4fffff", "893c8d46e87ffff", "893c8d46e0fffff", "893c8d46e4bffff", "893c8d44597ffff", "893c8d44593ffff", "893c8d4459bffff", "893c8d445c7ffff", "893c8d44557ffff", "893c8d44543ffff", "893c8d4455bffff", "893c8d44083ffff", "893c8d440c7ffff", "893c8d440cbffff", "893c8d4463bffff", "893c8d44293ffff", "893c8d44287ffff", "893c8d44287ffff", "893c8d44273ffff", "893c8d4426bffff", "893c8d4426bffff", "893c8d451b3ffff", "893c8d45197ffff", "893c8d45547ffff", "893c8d455cbffff", "893c8d45427ffff", "893c8d45427ffff", "893c8d4543bffff", "893c8d45433ffff", "893c8d454abffff", "893c8d45417ffff", "893c8d454a3ffff", "893c8d454b3ffff", "893c8d45483ffff", "893c8d4726fffff", "893c8d4726bffff", "893c8d409afffff", "893c8d409afffff", "893c8d409abffff", "893c8d409a3ffff", "893c8d4727bffff", "893c8d4720bffff", "893c8d472dbffff", "893c8d40da7ffff", "893c8d4767bffff", "893c8d4765bffff", "893c8d42b2fffff", "893c8d40d93ffff", "893c8d42b67ffff", "893c8d42b67ffff", "893c8d42b2bffff", "893c8d42b3bffff", "893c8d42b07ffff", "893c8d42b17ffff", "893c8d42b1bffff", "893c8d42b1bffff", "893c8d42bc7ffff", "893c8d42bdbffff", "893c8d42bd3ffff", "893c8d4286fffff", "893c8d42ab7ffff", "893c8d4284fffff", "893c8d42843ffff", "893c8d42e27ffff", "893c8d42e23ffff", "893c8d42eafffff", "893c8d42ea7ffff", "893c8d42eb7ffff", "893c8d42e87ffff", "893c8d42e8bffff", "893c8d42163ffff", "893c8d42177ffff", "893c8d42173ffff", "893c8d42173ffff", "893c8d42177ffff", "893c8d42133ffff", "893c8d421abffff", "893c8d42113ffff", "893c8d4218bffff", "893c8d42183ffff", "893c8d5524bffff", "893c8d5524bffff", "893c8d42527ffff", "893c8d552cbffff", "893c8d552dbffff", "893c8d552d3ffff", "893c8d5566bffff", "893c8d55673ffff", "893c8d5560bffff", "893c8d556c3ffff", "893c8d50967ffff", "893c8d50937ffff", "893c8d50937ffff", "893c8d509a7ffff", "893c8d5762bffff", "893c8d57637ffff", "893c8d570c3ffff", "893c8d57087ffff", "893c8d570b3ffff", "893c8d57543ffff", "893c8dcdb4fffff", "893c8dcdb57ffff", "893c8dcdbc7ffff", "893c8dcdb83ffff", "893c8dcdb97ffff", "893c8dcd82bffff", "893c8dcd83bffff", "893c8dcd877ffff", "893c8dcd873ffff", "893c8dcd873ffff", "893c8dcd8cbffff", "893c8dcdeafffff", "893c8dcde03ffff", "893c8dcded7ffff", "893c8dcd11bffff", "893c8dcd19bffff", "893c8dcd56fffff", "893c8dcd1dbffff", "893c8dcd033ffff", "893c8dcd067ffff", "893c8dcd3d3ffff", "893c8d52c93ffff", "893c8d52c9bffff", "893c8dcd26fffff", "893c8dcd26bffff", "893c8d521b7ffff", "893c8d5218fffff", "893c8d521c7ffff", "893c8d521d3ffff", "893c8d520b7ffff", "893c8d52097ffff", "893c8d5242fffff", "893c8d5242fffff", "893c8d52467ffff", "893c8d52467ffff", "893c8d52463ffff", "893c8d5247bffff", "893c8d526b3ffff", "893c8d5268fffff", "893c8d5261bffff", "893c8d526cfffff", "893c8d52653ffff", "893c8d5264bffff", "893c8d535b3ffff", "893c8d535a3ffff", "893c8d53533ffff", "893c8d53577ffff", "893c8d53037ffff", "893c8d5308bffff", "893c8d536b3ffff", "893c8c2692fffff", "893c8c269dbffff", "893c8c26d7bffff", "893c8c26d8bffff", "893c8c26d9bffff", "893c8dc9367ffff", "893c8dc9303ffff", "893c8dc9397ffff", "893c8dc902bffff", "893c8dc91cbffff", "893c8dc91dbffff", "893c8dc91d7ffff", "893c8dc9537ffff", "893c8dc82d3ffff", "893c8dc805bffff", "893c8dc808fffff", "893c8dc8573ffff", "893c8dc8507ffff", "893c8dc85abffff", "893c8dc85b3ffff", "893c8dcae5bffff", "893c8dcaecbffff", "893c8dca16fffff", "893c8dca13bffff", "893c8dca1afffff", "893c8dca1b7ffff", "893c8dc1257ffff", "893c8dca537ffff", "893c8dca5abffff", "893c8dca5bbffff", "893c8dca583ffff", "893c8dd8b2bffff", "893c8dd8b33ffff", "893c8dd8823ffff", "893c8dd88afffff", "893c8dd88b3ffff", "893c8dd8c27ffff", "893c8dd8c3bffff", "893c8dd8c03ffff", "893c8dd8cd3ffff", "893c8dd81a7ffff", "893c8dd81b3ffff", "893c8dd8577ffff", "893c8dda2dbffff", "893c8ddb5afffff", "893c8ddb507ffff", "893c8ddb58bffff", "893c8ddb593ffff", "893c8ca5b33ffff", "893c8ca5bbbffff", "893c8ca5bbbffff", "893c8ca5b8bffff", "893c8ca5b9bffff", "893c8ca5863ffff", "893c8ca5873ffff", "893c8ca5833ffff", "893c8ca58abffff", "893c8ca5817ffff", "893c8ca588bffff", "893c8ca588bffff", "893c8ca588fffff", "893c8ca5887ffff", "893c8ca5d53ffff", "893c8ca5dc7ffff", "893c8ca4373ffff", "893c8ca4347ffff", "893c8ca435bffff", "893c8ca422fffff", "893c8ca4277ffff", "893c8ca425bffff", "893c8ca5523ffff", "893c8ca551bffff", "893c8ca55c3ffff", "893c8ca54abffff", "893c8ca548fffff", "893c8ca73c3ffff", "893c8ca73d7ffff", "893c8ca7023ffff", "893c8ca7033ffff", "893c8ca70afffff", "893c8ca71d3ffff", "893c8ca7577ffff", "893c8ca7533ffff", "893c8ca667bffff", "893c8ca6677ffff", "893c8ca6667ffff", "893c8ca628fffff", "893c8ca62a3ffff", "893c8ca63cbffff", "893c8ca6357ffff", "893c8ca633bffff", "893c8ca6337ffff", "893c8ca6e53ffff", "893c8ca6ed7ffff", "893c8ca6167ffff", "893c8ca612bffff", "893c8ca612fffff", "893c8ca6c5bffff", "893c8ca6eb3ffff", "893c8ca6eafffff", "893c8ca6e33ffff", "893c8ca6e8fffff", "893c8ca6e8bffff", "893c8ca6e53ffff", "893c8ca6e43ffff", "893c8ca6e7bffff", "893c8ca6e73ffff", "893c8ca6e23ffff", "893c8ca6a87ffff", "893c8ca68bbffff", "893c8ca6d4fffff", "893c8ca6c2fffff", "893c8ca6893ffff", "893c8ca6c67ffff", "893c8ca6c0fffff", "893c8ca6cabffff", "893cab6934bffff", "893cab6931bffff", "893cab6933bffff", "893c8ca6ca7ffff", "893c8ca6c37ffff", "893c8ca6cafffff", "893c8ca6c33ffff", "893c8ca6c23ffff", "893c8ca6c27ffff", "893c8ca6d53ffff", "893c8ca6d53ffff", "893c8ca6dcfffff", "893c8ca6d1bffff", "893c8ca6d13ffff", "893c8ca6d8bffff", "893cab69e4bffff", "893cab69e53ffff", "893cab69e4bffff", "893c8ca6db3ffff", "893c8ca6d07ffff", "893c8ca6dafffff", "893cab69e7bffff", "893cab69e6bffff", "893cab69ad7ffff", "893cab69a8fffff", "893cab69a8fffff", "893cab69a07ffff", "893cab69bcbffff", "893cab69bcbffff", "893cab69b53ffff", "893cab69b4fffff", "893cab69b6bffff", "893c8dd359bffff", "893c8dd3583ffff", "893c8dd35afffff", "893c8dd266bffff", "893c8dd2673ffff", "893c8dd2603ffff", "893c8dd2607ffff", "893c8dd26abffff", "893c8dd244fffff", "893c8dd2457ffff", "893c8dd2413ffff", "893c8dd248bffff", "893c8dd24d7ffff", "893cab68a7bffff", "893cab68a0bffff", "893cab68a57ffff", "893cab68acbffff", "893cab68e5bffff", "893cab68323ffff", "893cab68333ffff", "893cab68387ffff", "893cab6815bffff", "893cab681c7ffff", "893cab681d7ffff", "893cab6aac7ffff", "893cab6aa87ffff", "893cab6a8cbffff", "893cab6a8d7ffff", "893cab6a88bffff", "893cab6a897ffff", "893cab6ad5bffff", "893cab6acafffff", "893cab6acb3ffff", "893cab6123bffff", "893cab6128bffff", "893cab61643ffff", "893cab78b23ffff", "893cab78b03ffff", "893cab78bc7ffff", "893cab78b9bffff", "893cab7883bffff", "893cab788a3ffff", "893cab788b7ffff", "893cab78d43ffff", "893cab78dd7ffff", "893cab7ab3bffff", "893cab7ababffff", "893cab7abafffff", "893cab636c3ffff", "893cab6361bffff", "893cab63677ffff", "893cab6362fffff", "893cab6304bffff", "893cab6304fffff", "893cab632b7ffff", "893cab63067ffff", "893cab6302fffff", "893cab63023ffff", "893cab63037ffff", "893cab630abffff", "893cab630bbffff", "893cab6356bffff", "893cab6351bffff", "893cab6351bffff", "893cab6358fffff", "893cab63587ffff", "893cab63597ffff", "893cab71b23ffff", "893cab626dbffff", "893cab71ba7ffff", "893cab71bb7ffff", "893cab71963ffff", "893cab7190fffff", "893cab7191bffff", "893cab719c7ffff", "893cab719c3ffff", "893cab719d7ffff", "893cab718b7ffff", "893cab71d7bffff", "893cab71d77ffff", "893cab71d3bffff", "893cab71d17ffff", "893cab71d97ffff", "893cab7032fffff", "893cab702afffff", "893cab70673ffff", "893cab73307ffff", "893cab73357ffff", "893cab73353ffff", "893cab732abffff", "893cab73217ffff", "893cab73283ffff", "893cab7362fffff", "893cab73627ffff", "893cab730dbffff", "893cab736b3ffff", "893cab7345bffff", "893cab734cbffff", "893cab734d3ffff", "893cab09a23ffff", "893cab09bd3ffff", "893cab098abffff", "893cab098b7ffff", "893cab09d53ffff", "893cab09ca7ffff", "893cab0834fffff", "893cab083cbffff", "893cab082afffff", "893cab0804bffff", "893cab0805bffff", "893cab08607ffff", "893cab0868fffff", "893cab0b18bffff", "893cab0a257ffff", "893cab0a2a7ffff", "893cab0a02bffff", "893cab0a027ffff", "893cab0a18bffff", "893cab01213ffff", "893cab01283ffff", "893cab0162fffff", "893cab01627ffff", "893cab01073ffff", "893cab01397ffff", "893cab01edbffff", "893cab01ecbffff", "893cab01e47ffff", "893cab01e6fffff", "893cab01ac7ffff", "893cab0a9b7ffff", "893cab0f4d3ffff", "893cab0f4c7ffff", "893cab0f433ffff", "893cab0f42fffff", "893cab0f03bffff", "893cab0f393ffff", "893cab0f3b3ffff", "893cab0f3a7ffff", "893cab0c6cfffff", "893cab0c657ffff", "893cab0c673ffff", "893cab0c2d7ffff", "893cab0c23bffff", "893cab0c263ffff", "893cab0dc13ffff", "893cab0dc0fffff", "893cab0d893ffff", "893cab0d8b3ffff", "893cab0d95bffff", "893cab76657ffff", "893cab76647ffff", "893cab76673ffff", "893cab762cfffff", "893cab7626bffff", "893cab744c7ffff", "893cab74083ffff", "893cab7402bffff", "893cab743d7ffff", "893cab7438fffff", "893cab74307ffff", "893cab74373ffff", "893cab7433bffff", "893cab7432bffff", "893cab74e0fffff", "893cab74e0fffff", "893cab74e2bffff", "893cab7485bffff", "893cab748cbffff", "893cab748d3ffff", "893cab74c7bffff", "893cab74c3bffff", "893cab74cb3ffff", "893cab74ddbffff", "893cab74dc3ffff", "893cab74d83ffff", "893cab74d8fffff", "893cab74d17ffff", "893cab74dabffff", "893cab74da3ffff", "893cab2b253ffff", "893cab749b7ffff", "893cab294dbffff", "893cab294cbffff", "893cab2945bffff", "893cab29463ffff", "893cab29433ffff", "893cab294a7ffff", "893cab2b373ffff", "893cab2b30fffff", "893cab2b3bbffff", "893cab2b15bffff", "893cab2b143ffff", "893cab2b103ffff", "893cab2b13bffff", "893cab284dbffff", "893cab284dbffff", "893cab284d7ffff", "893cab284d7ffff", "893cab2a267ffff", "893cab2a347ffff", "893cab2a323ffff", "893cab2ae43ffff", "893cab285b7ffff", "893cab2ae23ffff", "893cab2aeb7ffff", "893cab2ac17ffff", "893cab2ac8fffff", "893cab21227ffff", "893cab213dbffff", "893cab2104fffff", "893cab210cfffff", "893cab210c7ffff", "893cab2109bffff", "893cab2140fffff", "893cab214b3ffff", "893cab214b3ffff", "893cab2337bffff", "893cab23373ffff", "893cab2330fffff", "893cab233b3ffff", "893cab2314fffff", "893cab2317bffff", "893cab206d7ffff", "893cab20607ffff", "893cab20047ffff", "893cab20383ffff", "893cab203a3ffff", "893cab203a7ffff", "893cab20167ffff", "893cab20c5bffff", "893cab20ca3ffff", "893cab22b63ffff", "893cab22b67ffff", "893cab22b37ffff", "893cab276cbffff", "893cab276cfffff", "893cab2761bffff", "893cab27673ffff", "893cab2762fffff", "893cab27047ffff", "893cab27063ffff", "893cab2702bffff", "893cab271cbffff", "893cab27163ffff", "893cab2468bffff", "893cab246abffff", "893cab2408bffff", "893cab24013ffff", "893cab240a3ffff", "893cab241d3ffff", "893cab24567ffff", "893cab2452bffff", "893cab24527ffff", "893cab26a0fffff", "893cab26a23ffff", "893cab26b9bffff", "893cab26bb7ffff", "893cab2696bffff", "893cf6536d7ffff", "893cf6536a7ffff", "893cf6530dbffff", "893cf6530cbffff", "893cf6530cbffff", "893cf653043ffff", "893cf65304fffff", "893cf653383ffff", "893cf65338fffff", "893cf653317ffff", "893cf653307ffff", "893cf65332bffff", "893cf65064fffff", "893cf65066bffff", "893cf6502cbffff");

        // Create an instance of H3Core
        H3Core h3 = H3Core.newInstance();

        // Generate boundary from the list of hex cells
        Geometry boundary = generateBoundaryFromHexCells(hexCells, h3);

        // Convert the boundary to GeoJSON format
        String geoJson = convertToGeoJson(boundary);

        // Print the GeoJSON
        System.out.println("GeoJSON boundary:");
        System.out.println(geoJson);
    }

    private static void loadProperties() throws IOException {
        InputStream inputStream = GenerateGeoJsonBoundaryFromListOfHexCells.class.getClassLoader().getResourceAsStream("application.properties");
        properties.load(inputStream);
        assert inputStream != null;
        inputStream.close();
    }


    public static Geometry generateBoundaryFromHexCells(List<String> hexCells, H3Core h3) {
        List<Coordinate> boundaryCoordinates = new ArrayList<>();
        for (String hexCell : hexCells) {
            List<LatLng> latLngs = h3.cellToBoundary(hexCell);
            for (LatLng latLng : latLngs) {
                boundaryCoordinates.add(new Coordinate(latLng.lng, latLng.lat));
            }
        }
        boundaryCoordinates.add(boundaryCoordinates.get(0));
        Coordinate[] coordinates = boundaryCoordinates.toArray(new Coordinate[0]);

        // Create a PrecisionModel with the desired precision
        PrecisionModel precisionModel = new PrecisionModel(Double.valueOf(properties.get("app.precisionScale").toString()));
        GeometryFactory geometryFactory = new GeometryFactory(precisionModel);

        LinearRing linearRing = geometryFactory.createLinearRing(coordinates);
        return geometryFactory.createPolygon(linearRing, null);
    }

    public static String convertToGeoJson(Geometry geometry) {
        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.serializeSpecialFloatingPointValues();
        Gson gson = gsonBuilder.create();

        JsonObject feature = new JsonObject();
        feature.addProperty("type", "Feature");

        JsonObject geometryJson = new JsonObject();
        geometryJson.addProperty("type", "Polygon");

        JsonArray coordinates = new JsonArray();
        if (geometry instanceof Polygon) {
            Polygon polygon = (Polygon) geometry;
            Coordinate[] coords = polygon.getExteriorRing().getCoordinates();
            for (Coordinate coord : coords) {
                JsonArray coordArray = new JsonArray();
                coordArray.add(coord.y);
                coordArray.add(coord.x);
                coordinates.add(coordArray);
            }
        }
        geometryJson.add("coordinates", coordinates);

        feature.add("geometry", geometryJson);

        JsonObject featureCollection = new JsonObject();
        featureCollection.addProperty("type", "FeatureCollection");
        JsonArray features = new JsonArray();
        features.add(feature);
        featureCollection.add("features", features);
        return gson.toJson(featureCollection);
    }

}
